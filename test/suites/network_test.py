# -*- coding: utf-8 -*-
# =============================================================================
# Traph Networks Unit Tests
# =============================================================================
#
# Testing the networks generated by the Traph.
#
from collections import defaultdict
from test.test_cases import TraphTestCase
from test.helpers import webentity_label_from_prefixes
from test.config import WEBENTITY_CREATION_RULES_REGEXES


def legible_network(webentities, network):
    new_network = defaultdict(list)

    for source, targets in network.items():
        new_network[webentities[source]] = [webentities[target] for target in targets]

    return new_network


class TestNetwork(TraphTestCase):

    def test_get_webentities_links(self):
        creation_rules = {
            's:http|h:com|h:world|': WEBENTITY_CREATION_RULES_REGEXES['path1']
        }

        webentities = {}

        with self.open_traph(webentity_creation_rules=creation_rules) as traph:

            report = traph.index_batch_crawl({
                's:http|h:com|h:world|p:europe|p:spain|': [
                    's:http|h:com|h:world|p:europe|p:spain|p:madrid|',
                    's:http|h:com|h:world|p:america|'
                ],
                's:http|h:com|h:world|p:america|': [
                    's:http|h:com|h:world|p:asia|'
                ]
            })

            for weid, prefixes in report.created_webentities.items():
                webentities[weid] = webentity_label_from_prefixes(prefixes)

            # Normal network
            network = legible_network(webentities, traph.get_webentities_links())

            self.assertIdenticalMultimaps(network, {
                's:http|h:com|h:world|p:europe|': [
                    's:http|h:com|h:world|p:america|'
                ],
                's:http|h:com|h:world|p:america|': [
                    's:http|h:com|h:world|p:asia|'
                ]
            })

            # Keeping auto-links
            network = legible_network(webentities, traph.get_webentities_links(include_auto=True))

            self.assertIdenticalMultimaps(network, {
                's:http|h:com|h:world|p:europe|': [
                    's:http|h:com|h:world|p:america|',
                    's:http|h:com|h:world|p:europe|'
                ],
                's:http|h:com|h:world|p:america|': [
                    's:http|h:com|h:world|p:asia|'
                ]
            })

            # Inlinks
            network = legible_network(webentities, traph.get_webentities_links(out=False))

            self.assertIdenticalMultimaps(network, {
                's:http|h:com|h:world|p:america|': [
                    's:http|h:com|h:world|p:europe|'
                ],
                's:http|h:com|h:world|p:asia|': [
                    's:http|h:com|h:world|p:america|'
                ]
            })
